//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     //
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Connected.Service.ArticleService
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.4.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Article", Namespace="http://www.chsakell.com/dotnetcorewcfproxies")]
    public partial class Article : object
    {
        
        private string AuthorField;
        
        private int BlogIDField;
        
        private string ContentsField;
        
        private int IDField;
        
        private string TitleField;
        
        private string URLField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Author
        {
            get
            {
                return this.AuthorField;
            }
            set
            {
                this.AuthorField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BlogID
        {
            get
            {
                return this.BlogIDField;
            }
            set
            {
                this.BlogIDField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Contents
        {
            get
            {
                return this.ContentsField;
            }
            set
            {
                this.ContentsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID
        {
            get
            {
                return this.IDField;
            }
            set
            {
                this.IDField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Title
        {
            get
            {
                return this.TitleField;
            }
            set
            {
                this.TitleField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string URL
        {
            get
            {
                return this.URLField;
            }
            set
            {
                this.URLField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.4.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://www.chsakell.com/dotnetcorewcfproxies", ConfigurationName="Connected.Service.ArticleService.IArticleService")]
    public interface IArticleService
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.chsakell.com/dotnetcorewcfproxies/IArticleService/Add", ReplyAction="http://www.chsakell.com/dotnetcorewcfproxies/IArticleService/AddResponse")]
        System.Threading.Tasks.Task AddAsync(Connected.Service.ArticleService.Article article);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.chsakell.com/dotnetcorewcfproxies/IArticleService/Update", ReplyAction="http://www.chsakell.com/dotnetcorewcfproxies/IArticleService/UpdateResponse")]
        System.Threading.Tasks.Task UpdateAsync(Connected.Service.ArticleService.Article article);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.chsakell.com/dotnetcorewcfproxies/IArticleService/Delete", ReplyAction="http://www.chsakell.com/dotnetcorewcfproxies/IArticleService/DeleteResponse")]
        System.Threading.Tasks.Task DeleteAsync(Connected.Service.ArticleService.Article article);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.chsakell.com/dotnetcorewcfproxies/IArticleService/GetById", ReplyAction="http://www.chsakell.com/dotnetcorewcfproxies/IArticleService/GetByIdResponse")]
        System.Threading.Tasks.Task<Connected.Service.ArticleService.Article> GetByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.chsakell.com/dotnetcorewcfproxies/IArticleService/GetAll", ReplyAction="http://www.chsakell.com/dotnetcorewcfproxies/IArticleService/GetAllResponse")]
        System.Threading.Tasks.Task<Connected.Service.ArticleService.Article[]> GetAllAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.4.0.0")]
    public interface IArticleServiceChannel : Connected.Service.ArticleService.IArticleService, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.4.0.0")]
    public partial class ArticleServiceClient : System.ServiceModel.ClientBase<Connected.Service.ArticleService.IArticleService>, Connected.Service.ArticleService.IArticleService
    {
        
    /// <summary>
    /// Implement this partial method to configure the service endpoint.
    /// </summary>
    /// <param name="serviceEndpoint">The endpoint to configure</param>
    /// <param name="clientCredentials">The client credentials</param>
    static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public ArticleServiceClient() : 
                base(ArticleServiceClient.GetDefaultBinding(), ArticleServiceClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.NetTcpBinding_IArticleService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ArticleServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(ArticleServiceClient.GetBindingForEndpoint(endpointConfiguration), ArticleServiceClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ArticleServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(ArticleServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ArticleServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(ArticleServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ArticleServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task AddAsync(Connected.Service.ArticleService.Article article)
        {
            return base.Channel.AddAsync(article);
        }
        
        public System.Threading.Tasks.Task UpdateAsync(Connected.Service.ArticleService.Article article)
        {
            return base.Channel.UpdateAsync(article);
        }
        
        public System.Threading.Tasks.Task DeleteAsync(Connected.Service.ArticleService.Article article)
        {
            return base.Channel.DeleteAsync(article);
        }
        
        public System.Threading.Tasks.Task<Connected.Service.ArticleService.Article> GetByIdAsync(int id)
        {
            return base.Channel.GetByIdAsync(id);
        }
        
        public System.Threading.Tasks.Task<Connected.Service.ArticleService.Article[]> GetAllAsync()
        {
            return base.Channel.GetAllAsync();
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.NetTcpBinding_IArticleService))
            {
                System.ServiceModel.NetTcpBinding result = new System.ServiceModel.NetTcpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.NetTcpBinding_IArticleService))
            {
                return new System.ServiceModel.EndpointAddress("net.tcp://localhost:8080/ArticleNetTcpService");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return ArticleServiceClient.GetBindingForEndpoint(EndpointConfiguration.NetTcpBinding_IArticleService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return ArticleServiceClient.GetEndpointAddress(EndpointConfiguration.NetTcpBinding_IArticleService);
        }
        
        public enum EndpointConfiguration
        {
            
            NetTcpBinding_IArticleService,
        }
    }
}
